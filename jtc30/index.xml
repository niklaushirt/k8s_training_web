<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JTC30 IBM CloudPak for Multicloud Management on Kubernetes Training</title>
    <link>https://niklaushirt.github.io/k8s_training_web/jtc30/</link>
    <description>Recent content in JTC30 IBM CloudPak for Multicloud Management on Kubernetes Training</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 23 Sep 2020 09:12:06 +0200</lastBuildDate>
    
	<atom:link href="https://niklaushirt.github.io/k8s_training_web/jtc30/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Lab 0: Preparation</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab0/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab0/</guid>
      <description>Open a Terminal window by clicking on the Termnial icon in the left sidebar - we will use this extensively later as well
  Start the demo application
Copy   kubectl create -f ~/training/deployment/demoapp.yaml kubectl create -f ~/training/deployment/demoapp-service.yaml kubectl create -f ~/training/deployment/demoapp-backend.yaml kubectl create -f ~/training/deployment/demoapp-backend-service.yaml      Wait for the demo application to be available (the status must be 1/1)
Copy   kubectl get pods    &amp;gt; NAME READY STATUS RESTARTS AGE &amp;gt; k8sdemo-backend-5b779f567f-2rbgj 1/1 Running 0 21s &amp;gt; k8sdemo-backend-5b779f567f-p6j76 1/1 Running 0 21s &amp;gt; k8sdemo-bd6bbd548-jcb6r 1/1 Running 0 21s   Open the demo application in the browser</description>
    </item>
    
    <item>
      <title>Lab 1: Import a cluster</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab1/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab1/</guid>
      <description>Philippe Thomas - Novembre 2020
Lab 1 - Access CP4M console Be sure to use the latest Firefox internet browser.
To get access the CP4M console, the instructor will give you a URL similar to the one below:
Copy   https://cp-console.nicebe-ba36b2ed0b6b09dbc627b56ceec2f2a4-0000.eu-de.containers.appdomain.cloud    The Credentials are admin and a password given by the instructor.
Then you should see the following sign on page:
For this exercise, we want to get access to the Cluster Administrator role, so click on the Default authentication link in the page:</description>
    </item>
    
    <item>
      <title>Lab 2: Navigate in the CP4M console</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab2/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab2/</guid>
      <description>Lab 2 - Navigate in the CP4M console Go back to the console:
In the top right corner, you can see your identity and the default account.
 You can create several accounts and several users but you need to connect to a LDAP
 Then you can navigate to the exclamation mark to look at different options to help you to implement the CP4M solutions :
For example, for support, you can also use Slack.</description>
    </item>
    
    <item>
      <title>Lab 3: Import a new cluster</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab3/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab3/</guid>
      <description>Lab 3 - Import a new cluster From the menu, Click on Automate Infrastructure, and the Clusters:
At this point, you should have only one cluster: the local cluster (this is the HUB cluster) or none if you didn&amp;rsquo;t import any cluster yet:
The local cluster is the OCP cluster where you installed CP4M main features.
Normally it should not be used to hold some applications : the best practice is to use remode clusters to deploy your applications.</description>
    </item>
    
    <item>
      <title>Lab 4: Deploy an application</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab4/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab4/</guid>
      <description>Lab 4 - Deploy an application Open the Menu (1) and click on Administer (2) &amp;gt; Helm repository (3).
On the Helm Repositories page, click Add Repository to register a new Helm Repository.
Type coc-charts (1) as repository Name, and enter https://ibm-icp-coc.github.io/charts/repo/stable as URL (2). Click Add (3).
After few seconds, you should see Sync Status as Completed. Now, letâ€™s deploy an application from this new Helm repository. Click Catalog on upper right corner of the page to view the list of helm charts that you can deploy.</description>
    </item>
    
    <item>
      <title>Lab 5: Find resources on multiple clusters</title>
      <link>https://niklaushirt.github.io/k8s_training_web/jtc30/lab5/</link>
      <pubDate>Wed, 23 Sep 2020 09:12:06 +0200</pubDate>
      
      <guid>https://niklaushirt.github.io/k8s_training_web/jtc30/lab5/</guid>
      <description>Lab 5 - Find resources on multiple clusters One feature that is very interesting in CP4M is the search feature (loop) on the top right part of the screen:
When you click on that feature, you see some predefined search that are very interesting for everyday:
Especially the workloads first search is very popular, then click on the tile:
The findings are shown:
What is important to notice, the search is executed across all clusters !</description>
    </item>
    
  </channel>
</rss>